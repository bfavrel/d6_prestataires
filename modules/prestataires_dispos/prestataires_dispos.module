<?php

/**
 * Implementation of hook_init().
 */
function prestataires_dispos_init() {
    drupal_add_js(drupal_get_path('module', 'prestataires_dispos') . '/scripts/prestataires_dispos.js', 'module');
    drupal_add_css(drupal_get_path('module', 'prestataires_dispos') . '/css/admin.css', 'all');
}

/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */
function prestataires_dispos_menu() {
    $items = array();

    // Autocomplete callback : liste des contenus à assigner
    $items['prestataires/autocomplete_dispos_list'] = array(
        'page callback' => 'prestataires_dispos_autocomplete_content_list',
        'page arguments' => array(2, 3),
        'access arguments' => array('administer users'),
        'type' => MENU_CALLBACK,
    );

    // AHAH callback : ajoute des éléments à la liste des contenus assignés
    $items['prestataires/add_dispos_list_elements'] = array(
        'page callback' => 'prestataires_dispos_add_content_list_elements',
        'access arguments' => array('administer users'),
        'type' => MENU_CALLBACK,
    );

    // Edition du calendrier
    $items['prestataires/dispos/edit'] = array(
        'page callback' => 'theme',
        'page arguments' => array('prestataires_dispos_edit_form', 3),
        'access callback' => 'prestataires_dispos_edition_access',
        'file' => 'prestataires_dispos.edit.inc',
        'type' => MENU_CALLBACK,
    );

    // Onglet dans la page du node
    $items['node/%/dispos'] = array(
    	'title' => 'Dispos',
    	'page callback' => 'theme',
        'page arguments' => array('prestataires_dispos_edit_form', 1),
    	'access callback' => 'prestataires_dispos_edit_tab_access',
        'access arguments' => array('edit dispos', 1),
    	'type' => MENU_LOCAL_TASK,
    	'weight' => 3,
    	'file' => 'prestataires_dispos.edit.inc',
    );

    // AHAH callback : traitement des entrées du calendrier
    $items['prestataires/dispos/save'] = array(
        'page callback' => 'prestataires_dispos_ajax_save',
        'access callback' => 'prestataires_dispos_edition_access',
        'file' => 'prestataires_dispos.edit.inc',
        'type' => MENU_CALLBACK,
    );

    // AHAH callback : reinitialisation des contrôles du calendrier
    $items['prestataires/dispos/cancel'] = array(
        'page callback' => 'prestataires_dispos_cancel',
        'access callback' => 'prestataires_dispos_edition_access',
        'file' => 'prestataires_dispos.edit.inc',
        'type' => MENU_CALLBACK,
    );

    // Exportation des dispos en XLS
    $items['admin/reports/dispos/export'] = array(
        'title' => 'Availabilities',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('prestataires_dispos_export_form'),
        'access arguments' => array('access site reports'),
        'file' => 'prestataires_dispos.admin.inc',
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

function prestataires_dispos_edition_access() {
    return user_access('edit dispos') || user_access('edit all dispos');
}

/**
 * Check rights to access node edit dispos tab
 *
 * @param string $access
 * @param int $nid
 *
 * @return boolean
 */
function prestataires_dispos_edit_tab_access($access, $nid) {

	$contents_enable = variable_get('prestataires_dispos_content_types', array());

    global $user;

    if($user->uid != 1 && user_access('edit all dispos') != true && db_result(db_query("SELECT uid FROM {prestataires_dispos_nodes} WHERE nid=%d AND uid=%d", $nid, $user->uid)) == false) {
        return false;
    }

    $node = node_load($nid);

    if($node->language != 'fr') {
        return false;
    }

	if ($contents_enable[$node->type] && user_access($access)) {
		return true;
	}

	return false;
}

/**
 * Implementation of hook_prestataires
 */
function prestataires_dispos_prestataires($op) {

    switch($op) {

        case 'settings':
            return prestataires_dispos_form_settings();
            break;

        case 'roles':
            return 'prestataire dispos';
            break;

        case 'user_edit_form':
            return prestataires_dispos_user_edit_form(func_get_arg(1));
            break;

        case 'user_profil':
            return prestataires_dispos_user_profile(func_get_arg(1));
            break;

    }
}

/**
 * Return module settings
 */
function prestataires_dispos_form_settings() {

    $form = array();

    $content_types = node_get_types('names');

    $form['prestataires_dispos'] = array(
        '#type' => 'fieldset',
        '#title' => t("Prestataires Dispos"),
        '#weight' => -10,
        '#collapsible' => true,
        '#collapsed' => true,
    );

    $form['prestataires_dispos']['prestataires_dispos_content_types'] = array(
        '#type' => 'checkboxes',
        '#title' => t("Prestataires can set dispos for this type(s) of content"),
        '#options' => $content_types,
        '#default_value' => variable_get('prestataires_dispos_content_types', array()),
    );

    $form['prestataires_dispos']['prestataires_dispos_dispos_types'] = array(
        '#type' => 'textarea',
        '#title' => t("Types of dispos"),
        '#description' => t("Enter one type per line.<br />First type will receive 'dispo_type_1' class, second one 'dispo_type_2' class, etc.<br />Optionaly, color for export can be added : <strong><em>type</em>[|RRGGBB]</strong>"),
        '#default_value' => variable_get('prestataires_dispos_dispos_types', "Closed|c2c2c2" . PHP_EOL . "Full|ffdede" . PHP_EOL . "Limited|fbff92" . PHP_EOL . "Available|c3ffc2"),
        '#wysiwyg' => false,
    );
    if (module_exists('sirtaqui_import')) {
    	$form['prestataires_dispos']['prestataires_dispos_sirtaqui_dispos_types'] = array(
            '#type' => 'textarea',
            '#title' => t("Types for Sirtaqui dispos"),
            '#description' => t("Enter one sirtaqui type per line (NR, RQ, OK...).<br />First type will receive 'dispo_type_0' class (unspecified value), second one 'dispo_type_1' class, etc."),
            '#default_value' => variable_get('prestataires_dispos_sirtaqui_dispos_types', null),
            '#wysiwyg' => false,
    	);
    }

    $form['prestataires_dispos']['prestataires_dispos_dispos_datafields'] = array(
        '#type' => 'textarea',
        '#title' => t("Data fields available for dispos"),
        '#description' => t("Enter one field per line."),
        '#default_value' => variable_get('prestataires_dispos_dispos_datafields', null),
        '#wysiwyg' => false,
    );

    if(module_exists('prestataires_kiosque')) {
            $form['prestataires_dispos']['prestataires_kiosque_content_types'] = array(
            '#type' => 'checkboxes',
            '#title' => t("Kiosque module will only display this type(s) of content"),
            '#options' => array_filter(variable_get('prestataires_dispos_content_types', array())),
            '#default_value' => variable_get('prestataires_kiosque_content_types', array()),
        );
    }

    if(module_exists('sirtaqui_content_listing')) {
        $form['prestataires_dispos']['prestataires_dispos_export_fields'] = array(
            '#type' => 'textarea',
            '#title' => t("Fields to export with dispos"),
            '#description' => t("Format : <strong>field name (non-f)|export label[|width;alignementH;alignementV] (default width: 10.71)</strong><br />One field per line.<br />Only fields with '_value' (no '_fid', no '_value2', etc.). CCK multiples allowed."),
            '#default_value' => variable_get('prestataires_dispos_export_fields', null),
            '#wysiwyg' => false,
    	);
    }

    $form['prestataires_dispos']['prestataires_dispos_export_joins'] = array(
        '#type' => 'textarea',
        '#title' => t("Export JOIN clauses"),
        '#default_value' => variable_get('prestataires_dispos_export_joins', ''),
        '#wysiwyg' => false,
    );

    $form['prestataires_dispos']['prestataires_dispos_export_orderby'] = array(
        '#type' => 'textarea',
        '#title' => t("Export ORDER BY clause"),
        '#default_value' => variable_get('prestataires_dispos_export_orderby', 'n.title ASC'),
        '#wysiwyg' => false,
    );

    $form['prestataires_dispos']['prestataires_dispos_export_mode'] = array(
        '#type' => 'radios',
        '#title' => t("Export mode"),
        '#options' => array(
            '1' => t("Export only entries for which dispos have been set for the selected period"),
            '2' => t("Export all entries, regardless if they are filled or not"),
        ),
        '#default_value' => variable_get('prestataires_dispos_export_mode', 1),
    );

    $form['prestataires_dispos']['prestataires_dispos_limit_export_period'] = array(
        '#type' => 'textfield',
        '#title' => t("Limit export up to"),
        '#field_suffix' => t("days"),
        '#default_value' => variable_get('prestataires_dispos_limit_export_period', 31),
        '#required' => true,
        '#size' => 2,
    );

    $form['prestataires_dispos']['prestataires_dispos_allocate_memory'] = array(
        '#type' => 'textfield',
        '#title' => t("Additional memory to allocate to export script"),
        '#description' => t("Format php.ini (ie: '32M').<br />Additional memory will be allocated only in the case of exported period exceed number of days set above.<br /><strong>Warning : by default, Suhosin extension prevents overtaking memory allocation !</strong>"),
        '#default_value' => variable_get('prestataires_dispos_allocate_memory', null),
        '#wysiwyg' => false,
        '#size' => 4,
    );

    $form['prestataires_dispos']['orderby'] = array(
        '#type' => 'fieldset',
        '#title' => t("ORDER BY"),
        '#description' => t("Module prestataires_dispos can generate a sorting clause in order to display last updated products first.<br />
            It's possible to choose how to integer this clause against existing ORDER BY set by other modules."),
    );

    $form['prestataires_dispos']['orderby']['prestataires_dispos_search_orderby'] = array(
        '#type' => 'radios',
        '#title' => t("hook_scl_search() behavior"),
        '#description' => t("At this point, SCL filters and eventually scl sorting (depends on settings) have been processed"),
        '#default_value' => variable_get('prestataires_dispos_search_orderby', 0),
        '#options' => array(
            1 => t("Prepend"),
            2 => t("Append"),
            3 => t("Replace"),
        ),
    );

    $form['prestataires_dispos']['orderby']['prestataires_dispos_defer_search'] = array(
        '#type' => 'checkbox',
        '#title' => t("Delegate hook_scl_search() processing to hook_scl_query()"),
        '#description' => t("Behavior above will be inherited by hook_scl_query() only for this processing"),
        '#default_value' => variable_get('prestataires_dispos_defer_search', 0),
    );

    $form['prestataires_dispos']['orderby']['prestataires_dispos_query_orderby'] = array(
        '#type' => 'radios',
        '#title' => t("hook_scl_query() behavior"),
        '#description' => t("This hook is called at the very end of the process, just before SQL compilation.<br />
            If this hook receive delegation from hook_scl_search(), it won't do no more than processing the search field fragment it receives.<br />
            If an orderby is already performed by hook_scl_search(), it won't do nothing else.<br />
            Otherwise it will add its own order clause (last_update DESC)."),
        '#default_value' => variable_get('prestataires_dispos_query_orderby', 0),
        '#options' => array(
            0 => t("None"),
            1 => t("Prepend"),
            2 => t("Append"),
            3 => t("Replace"),
        ),
    );

    $form['prestataires_dispos']['prestataires_dispos_debug_query'] = array(
        '#type' => 'checkbox',
        '#title' => t("Debug mode"),
        '#description' => t("Display queries in Drupal messages zone (only for UID 1)"),
        '#default_value' => variable_get('prestataires_dispos_debug_query', 0),
    );

    return $form;
}

/**
 * Alter and return user profil edit form
 *
 * @param array $form original form
 * @return string
 */
function prestataires_dispos_user_edit_form($form) {

    $additions = array();

    // on altère que si c'est un admin qui affiche le formulaire et si l'utilisateur fait partie du groupe 'prestataire dispos'
    if(user_access('administer users') == false || !isset($form['_account']['#value']->roles[prestataires_get_rid('prestataire dispos')])) {return;}

    $uid = $form['#uid'];

    $additions['dispos_contents'] = array(
        '#type' => 'fieldset',
        '#title' => t("Prestataires : Dispos contents parameters"),
        '#weight' => -9,
        '#tree' => true,
    );

    $additions['dispos_contents']['dispos_contents_display'] = array(
        '#type' => 'markup',
        '#prefix' => "<div id='dispos_contents_display'>",
        '#suffix' => "</div>",
    );

    $user = user_load($form['#uid']);

    $req = "SELECT n.nid, n.title FROM {node} n
            LEFT JOIN {prestataires_dispos_nodes} p_d_n ON p_d_n.nid = n.nid
            WHERE p_d_n.uid=%d AND n.language='%s' ORDER BY n.title ASC";
    $result = db_query($req, $uid, language_default('language'));

    if($result->num_rows != null) {
        while($row = db_fetch_array($result)) {
            $additions['dispos_contents']['dispos_contents_display'][] = prestataires_dispos_create_dispos_content_div_element($row['title'], $row['nid']);
        }
    } else {
        $additions['dispos_contents']['dispos_contents_display']['#value'] = t("No content assigned yet");
    }

    $additions['dispos_contents']['dispos_contents_input'] = array(
        '#type' => 'textfield',
        '#title' => t("Assign content"),
        '#default_value' => '',
        '#autocomplete_path' => 'prestataires/autocomplete_dispos_list/' . $uid,
        '#ahah' => array(
            'path' => 'prestataires/add_dispos_list_elements',
            'wrapper' => 'dispos_contents_display',
            'effect' => 'fade',
            'event' => 'blur',
            'method' => 'replace',
        ),

    );

    $additions['#submit'] = 'prestataires_dispos_form_user_profile_form_submit';

    return $additions;
}

/**
 * Processing added and deleted contents
 */
function prestataires_dispos_form_user_profile_form_submit($form, &$form_state) {

    $uid = $form['#uid'];

    $contents = $form_state['values']['dispos_contents']['dispos_contents_display'];

    if(!empty($contents)) {
        $nids_to_reset = array();

        foreach($contents as $content) {
            if($content['to_reset'] == 1){

                $nids_to_reset[] = $content['content'];

            } else {
                $req = "REPLACE INTO {prestataires_dispos_nodes} SET nid=%d, uid=%d, last_update=NOW()";
                db_query($req, $content['content'], $uid);
            }
        }

        if(!empty($nids_to_reset)) {
            prestataires_dispos_clean_dispos_tables($uid, $nids_to_reset);
        }
    }
}

/**
 * Clear records in database.
 *
 * @param int $uid if not provided, $nids must containe one nid
 * @param array $nids if provided, only matching records will be deleted, else all records will be deleted
 */
function prestataires_dispos_clean_dispos_tables($uid = null, $nids = array()) {

    // suppression d'un node
    // suppression d'une association fiche-prestataire
    if(!empty($nids)) {
        $req = "DELETE FROM {prestataires_dispos_nodes} WHERE nid IN(" . db_placeholders($nids) . ")";
        db_query($req, $nids);

        $req = "DELETE FROM {prestataires_dispos_dispos} WHERE nid IN(" . db_placeholders($nids) . ")";
        db_query($req, $nids);

    // suppression d'un utilisateur
    // désatribution du rôle 'prestataire dispos'
    } else if($uid != null) {
        $req = "DELETE p_d_d FROM {prestataires_dispos_dispos} AS p_d_d RIGHT JOIN {prestataires_dispos_nodes} AS p_d_n ON p_d_d.nid=p_d_n.nid WHERE uid=%d";
        db_query($req, $uid);

        $req = "DELETE FROM {prestataires_dispos_nodes} WHERE uid=%d";
        db_query($req, $uid);
    }
}

/**
 * Return a div element with title and delete link.
 */
function prestataires_dispos_create_dispos_content_div_element($title, $nid) {
    return array(
        '#type' => 'markup',
        '#prefix' => "<div class='dispos_content_title' id='title_" . $nid . "'>",
        '#value' => $title . " <a class='delete_dispo' href='#'>(" . t("delete") . ")</a>",
        '#suffix' => "</div>",
        'content' => prestataires_dispos_create_dispos_content_value_element($nid),
        'to_reset' => prestataires_dispos_create_dispos_content_hidden_element(),
    );
}

/**
 * Return a value element which will store owned nid
 */
function prestataires_dispos_create_dispos_content_value_element($nid) {
    return array(
        '#type' => 'value',
        '#value' => $nid,
    );
}

/**
 * Return an hidden element which will store nid to reset
 */
function prestataires_dispos_create_dispos_content_hidden_element() {
    return array(
        '#type' => 'hidden',
    );
}

/**
 * Autocomplete callback for the textfield
 */
function prestataires_dispos_autocomplete_content_list($uid, $string) {

    $user = user_load($uid);

    $clause_in = array();
    $content_types = variable_get('prestataires_dispos_content_types', array());

    foreach($content_types as $key => $value) {
        if($value != '0') {
            $clause_in[] = $key;
        }
    }

    if(empty($clause_in)){return drupal_json(array());}

    $req = "SELECT n.nid, title FROM {node} n LEFT JOIN {prestataires_dispos_nodes} p_d_n ON p_d_n.nid = n.nid  WHERE (p_d_n.uid!=%d OR p_d_n.uid IS NULL) AND p_d_n.nid IS NULL AND type IN (" . db_placeholders($clause_in, 'text') . ") AND title LIKE '%%%s%%' AND language='%s' ORDER BY title ASC";
    $result = db_query($req, array_merge((array)$uid, $clause_in, (array)$string, (array)(!empty($user->language) ? $user->language : 'fr')));

    $titles = array();

    while($row = db_fetch_array($result)) {
        $titles[$row['nid']] = $row['title'];
    }

    return drupal_json($titles);
}

/**
 * AHAH callback for the textfield
 */
function prestataires_dispos_add_content_list_elements() {

    // TODO : security : éviter l'utilisation des données POST. Regarder du côté des arguments.
    $form_build_id = $_POST['form_build_id'];
    $form_id = $_POST['form_id'];
    $nid = $_POST['dispos_contents']['dispos_contents_input'];

    // on initialise un form_state
    $form_state = array('storage' => NULL, 'submitted' => FALSE);

    // on extrait la structure de base du formulaire du cache (état non submited)
    $form = form_get_cache($form_build_id, $form_state);

    $req = "SELECT title FROM {node} WHERE nid=%d";
    $title = db_result(db_query($req, $nid));

    if(!empty($title)){
        // on ajoute les deux nouveaux elements
        $form['dispos_contents']['dispos_contents_display'][] = prestataires_dispos_create_dispos_content_div_element($title, $nid);
    }

    // on sauvegarde la strucutre du formulaire modifié dans le cache
    form_set_cache($form_build_id, $form, $form_state);

    // on construit le formulaire (données POST mappées)
    $form = form_builder($form_id, $form, $form_state);

    // on effectue le rendu HTML de la section modifiée
    $output = "";

    foreach (element_children($form['dispos_contents']['dispos_contents_display']) as $element) {

        $output .= drupal_render($form['dispos_contents']['dispos_contents_display'][$element]);
    }

    return drupal_json($output);
}

/**
 * Return an HTML Calendar of availabilities
 * @param int $nid
 * @param bool $is_front_office It doesn't make sense to show an empty calendar
 * @return string
 */
function prestataires_dispos_render_calendar($nid, $is_front_office = true) {

    require_once('classes/prestatairesCalendar.class.php');

    $output = "";

    $now = getdate();

    $year = $now['year'];
    $month = $now['mon'];

    $calendar = new PrestatairesCalendar();

    $calendar->dispos_datafields = prestataires_dispos_get_dispos_datafields();

    global $language;

    if($language->language != language_default('language')) {
        $req = "SELECT tnid FROM {node} WHERE nid=%d";
        $nid = db_result(db_query($req, $nid));
    }

    $req = "SELECT * FROM {prestataires_dispos_dispos} WHERE nid=%d";
    $result = db_query($req, $nid);

    if($result->num_rows == 0 && $is_front_office == true) {return;}

    while($row = db_fetch_array($result)) {

    	$start_date = new DateTime($row['start_date']);
        $end_date = new DateTime($row['end_date']);

        $interval = date_diff($start_date, $end_date);

    	if ($start_date > $end_date) {
        	watchdog('Prestataire Dispo', "Prestataire dispo : End date before start date => start date : " . $start_date->format('Y-m-d') . " and end date : " . $row['end_date'], null, WATCHDOG_ERROR);
        }
        elseif ($interval->y > 2) {
        	watchdog('Prestataire Dispo', "Prestataire dispo : Interval between start date and end date is bigger than 2 years, start date : " . $start_date->format('Y-m-d') . " and end date : " . $row['end_date'], null, WATCHDOG_ERROR);
        }
        else {

        	// La date de fin ne sera pas traitée par la boucle. On la traite "manuellement".
        	$calendar->dispos_by_day['_' . $row['end_date']]['type_dispo'] = $row['type_dispo'];
        	$calendar->dispos_by_day['_' . $row['end_date']]['dispo_data'] = unserialize($row['data']);

	        while($start_date->format('Y-m-d') != $row['end_date']) {

	            $calendar->dispos_by_day['_' . $start_date->format('Y-m-d')]['type_dispo'] = $row['type_dispo'];
	            $calendar->dispos_by_day['_' . $start_date->format('Y-m-d')]['dispo_data'] = unserialize($row['data']);
	            $start_date->modify('+1 day');

	        }
        }
    }

    $idx = 0;
    
    for($i = 0; $i < 12; $i++) {
        if($month + $i > 12) {
            $month -= 12;
            $year++;
        }

        $output .= $calendar->create_month($year, $month + $i, "cols2_" . ($idx % 2) . " cols3_" . ($idx % 3) . " cols4_" . ($idx % 4));
        $idx++;
    }

    return $output;
}

/**
 * Return user profile items
 * @param stdclass $account
 */
function prestataires_dispos_user_profile($account) {
    if(!isset($account->roles[prestataires_get_rid('prestataire dispos')])) {return;}

    $user = user_load($account->uid);

    $req = "SELECT n.nid, title FROM {node} n LEFT JOIN {prestataires_dispos_nodes} p_d_n ON p_d_n.nid = n.nid WHERE p_d_n.uid=%d ORDER BY title ASC";
    $result = db_query($req, $account->uid, $user->language);

    $value = "";

    while($row = db_fetch_array($result)) {
        $value .= "<li>" . l($row['title'], 'prestataires/dispos/edit/' . $row['nid']) . "</li>";
    }

    if($value == "") {return;}

    $value = "<ul>" . $value . "</ul>";

    $item = array(
        'prestataires_dispos' => array(
            '#type' => 'user_profile_item',
            '#title' => t("Availabilities"),
            '#value' => $value,
            '#weight' => 0,
            '#attributes' => array(id => '', 'class' => 'prestataires_user_profile_item'),
        ),
    );

    return $item;
}

/**
 * Get an array of dispos labels
 */
function prestataires_dispos_get_dispos_types() {
    $dispo_types = variable_get('prestataires_dispos_dispos_types', "Closed|c2c2c2" . PHP_EOL . "Full|ffdede" . PHP_EOL . "Limited|fbff92" . PHP_EOL . "Available|c3ffc2");
    $dispo_types = explode('<br />', nl2br($dispo_types));

    foreach($dispo_types as $key => $value) {
        $value = explode('|', trim($value));
        $dispo_types[$key] = $value[0];
    }

    return $dispo_types;
}

/**
 * Get an array of Sirtaqui dispos values
 */
function prestataires_dispos_get_sirtaqui_dispos_types() {
	$dispo_types = variable_get('prestataires_dispos_sirtaqui_dispos_types', array());
	$dispo_types = explode('<br />', nl2br($dispo_types));

	foreach($dispo_types as $key => $value) {
		$dispo_types[$key] = trim($value);
	}

	return $dispo_types;
}

/**
 * Get an array of dispos infos fields
 */
function prestataires_dispos_get_dispos_datafields() {
    $dispo_fields = variable_get('prestataires_dispos_dispos_datafields', array());
    $dispo_fields = explode('<br />', nl2br($dispo_fields));

    foreach($dispo_fields as $key => $value) {
        $dispo_fields[$key] = trim($value);
    }

    return $dispo_fields;
}

/**
 * Implementation of hook_perm().
 *
 * @return array An array of valid permissions
 */
function prestataires_dispos_perm() {

    // edit dispos : rôle qui permet d'administrer SES PROPRES dispos
    // edit all dispos : rôle qui permet d'administrer TOUTES les dispos (pour les webmasters)

    return array('edit dispos', 'edit all dispos');
}

/**
 * Implementation of hook_cron().
 */
function prestataires_dispos_cron() {

    $req = "DELETE FROM {prestataires_dispos_dispos} WHERE end_date<CURDATE()";
    db_query($req);

    prestataires_dispos_page_dispos();
}

/**
 * Implementation of hook_theme_registry_alter().
 * Adds the module's '/theme' path suggestion to theme('node'), so it will able to find 'node-listing.tpl.php'
 *
 * @param $theme_registry The entire cache of theme registry information, post-processing.
 */
function prestataires_dispos_theme_registry_alter(&$theme_registry) {
    $theme_registry['node']['include files'][] = drupal_get_path('module', 'prestataires_dispos') . '/theme/theme.inc';
    $theme_registry['node']['preprocess functions'][] = 'prestataires_dispos_preprocess_node';
}

/**
 * Implementation of hook_theme().
 */
function prestataires_dispos_theme() {
    $path = drupal_get_path('module', 'prestataires_dispos') . '/theme';

    return array(
        'prestataires_dispos_edit_form' => array(
            'arguments' => array('nid' => NULL),
            'path' => $path,
            'file' => 'theme.inc',
        ),
        'prestataires_dispos_legend' => array(
            'arguments' => array(),
            'path' => $path,
            'file' => 'theme.inc',
        ),
        'prestataires_dispos_page' => array(
            'arguments' => array('nid' => NULL),
            'path' => $path,
            'file' => 'theme.inc',
            'template' => 'prestataires_dispos_page',
        ),
        'prestataires_dispos_kiosque_page' => array(
            'arguments' => array('arguments' => NULL),
            'path' => $path,
            'file' => 'theme.inc',
            'template' => 'prestataires_dispos_kiosque_page',
        ),
        'prestataires_dispos_export' => array(
            'path' => $path,
            'file' => 'theme.inc',
        ),

        // 19/05/2015 : une table dans la page des dispos
        'prestataires_dispos_page_table' => array(
            'path' => $path,
            'file' => 'theme.inc',
        ),
    );
}

/**
 * Implementation of hook_user().
 *
 * @param $op What kind of actions is being performed. Possible values: after_update, categories, delete, form, insert, load, login, logout, register, submit, update, validate, view
 * @param &$edit The array of form values submitted by the user.
 * @param &$account The user object on which the operation is being performed.
 * @param $category The active category of user information being edited.
 */
function prestataires_dispos_user($op, &$edit, &$account, $category = NULL) {

    if($op == 'delete') {
        prestataires_dispos_clean_dispos_tables($account->uid);
    }

    if($op == 'validate') {

        $rid = prestataires_get_rid('prestataire dispos');

        // le rôle 'prestataire dispos' était-il présent avant soumission ?
        if(isset($account->roles[$rid])) {

            // est t-il désactivé ?
            // Attention! Dépendance au module Role Assign : "$edit['roleassign_roles']" remplace "$edit['roles']" (sauf pour UID==1)
            if($edit['roles'][$rid] === 0 || $edit['roleassign_roles'][$rid] === 0) {

                prestataires_dispos_clean_dispos_tables($account->uid);

                // pour éviter la recréation des enregistrements @see prestataires_dispos_form_user_profile_form_submit()
                $edit['dispos_contents']['dispos_contents_display'] = array();
            }
        }
    }
}

/**
 * Implementation of hook_nodeapi().
 */
function prestataires_dispos_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {

    if($op == 'delete') {
        prestataires_dispos_clean_dispos_tables(null, array($node->nid));
    }
}

/**
 * Implementation of hook_kiosque().
 */
function prestataires_dispos_kiosque($op) {

    switch($op) {

        case 'menu':
            $items = array();

            $items['kiosque/dispos'] = array(
                'title' => 'Availabilities',
                'page callback' => 'prestataires_kiosque_page',
                'page arguments' => array('prestataires_dispos'),
                'access arguments' => array('access kiosque'),
                'menu_name' => 'menu-kiosque',
                'type' => MENU_NORMAL_ITEM,
            );

            return $items;
            break;

        case 'content':
            $args = func_get_args();
            array_shift($args);

            return theme('prestataires_dispos_kiosque_page', $args);
            break;
    }
}

/**
 * Implementation of hook_views_api()
 */
function prestataires_dispos_views_api() {
    return array(
        'api' => 2,
        'path' => drupal_get_path('module', 'prestataires_dispos') . "/views",
    );
}

/**
 * Implementation of hook_so_forms()
 */
function prestataires_dispos_so_forms($module, $id) {

    if($module != 'sirtaqui_content_listing') {return;} // on ne fourni des champs qu'à SCL, pour l'instant

    // on ne propose le champ, que si tous les type de contenus du listing sont compatibles
    $parsed_id = explode('@', $id);
    $clid = $parsed_id[0];

    $content_listing = sirtaqui_load_sirtaqui_content_listing($clid);
    $scl_content_types = unserialize($content_listing->sirtaqui_content);
    $dispo_content_types = variable_get('prestataires_dispos_content_types', array());
    $correlation = array_intersect($dispo_content_types, $scl_content_types);

    if(count($correlation) != count($scl_content_types)) {return;}
    //--

    $field = array(
        'fields_definitions' => array(
            'availabilities' => array(
                'label' => "Availabilities",
                'type' => 'dates',
                'callbacks' => array(
                    'configuration' => 'prestataires_dispos_search_field_configuration',
                    'render' => 'prestataires_dispos_search_field_render',
                ),
            ),
        ),
    );

    return $field;
}

/**
 * Configuration form callback for so_forms field config form.
 */
function prestataires_dispos_search_field_configuration($field_infos, $langcode, $configuration) {

    $form = array();
    $form['#weight'] = 10;

    $options = array();

    $dispos_types = prestataires_dispos_get_dispos_types();

    // attention, on travaille toujours avec un décalage de +1 des indexes
    foreach((array)$dispos_types as $key => $value) {
        $options[$key + 1] = $value;
    }

    $form['dispos_types'] = array(
        '#type' => 'checkboxes',
        '#title' => t("Types of availabilities to search for"),
        '#options' => $options,
        '#default_value' => (array)$configuration['dispos_types'],
    );

    $form['results_accuracy'] = array(
        '#type' => 'radios',
        '#title' => t("Results accuracy"),
        '#options' => array(
            1 => t("Results have to contain only days matching selected availability types"),
            2 => t("Results have to contain at least one day matching authorized availability types"),
        ),
        '#default_value' => isset($configuration['results_accuracy']) ? $configuration['results_accuracy'] : 1,
    );

    if($configuration['results_accuracy'] == 2) {
        $form['include_unknown'] = array(
            '#type' => 'checkbox',
            '#title' => t("Include results for which no availability has been set"),
            '#default_value' => isset($configuration['include_unknown']) ? $configuration['include_unknown'] : 0,
        );
    }

    $form['shift_start'] = array(
        '#type' => 'checkbox',
        '#title' => t("Search on start date +1 day"),
        '#default_value' => $configuration['shift_start'],
    );

    $form['shift_end'] = array(
        '#type' => 'checkbox',
        '#title' => t("Search on end date -1 day"),
        '#default_value' => $configuration['shift_end'],
    );

    return $form;
}

/**
 * so_forms callback : alter form elements before rendering
 */
function prestataires_dispos_search_field_render($field_infos, $langcode, $configuration, $element) {

    // add date popup to datefields widget
    if($field_infos['widget_name'] == 'datefields' && module_exists('date_popup')) {
        $element['from'] = array_merge($element['from'], array(
            '#type' => 'date_popup',
            '#date_format' => 'd/m/Y',
            '#date_year_range' => '0:+2',
        ));

        $element['to'] = array_merge($element['to'], array(
            '#type' => 'date_popup',
            '#date_format' => 'd/m/Y',
            '#date_year_range' => '0:+2',
        ));
    }

    return $element;
}

/**
 * Helper : compile search fragment data
 */
function _prestataires_dispos_search_sql_fragment($field, &$query, $orderby_mode, $content_listing) {

    if($field['values']['from'] == null) {$field['values']['from'] = '1970-01-01';}
    if($field['values']['to'] == null) {$field['values']['to'] = '3000-01-01';}

    // Les résultats sont sensés être exploitables : on ne tiens donc pas compte de ce qui est antérieur à aujourd'hui
    if($field['values']['from'] < date('Y-m-d')) {
        $field['values']['from'] = date('Y-m-d');
    }

    if($field['values']['from'] > $field['values']['to']) {
        $temp = $field['values']['from'];
        $field['values']['from'] = $field['values']['to'];
        $field['values']['to'] = $temp;
    }

    if($field['values']['to'] > $field['values']['from']) {

        $from = DateTime::createFromFormat('Y-m-d', $field['values']['from']);
        $to = DateTime::createFromFormat('Y-m-d', $field['values']['to']);

        if($field['configuration']['shift_start'] == 1) {
            $from->modify('+1 day');
        }

        if($field['configuration']['shift_end'] == 1) {
            $to->modify('-1 day');
        }

        if($to >= $from) {
            $field['values']['from'] = $from->format('Y-m-d');
            $field['values']['to'] = $to->format('Y-m-d');
        }
    }

    $types_dispos = array_filter($field['configuration']['dispos_types']);

    if($field['configuration']['results_accuracy'] == 1) { // "Les résultats ne doivent contenir que des jours correspondant à un des types de disponibilités sélectionnés"

        // on recherche les nids des périodes correspondantes, ayant un type de dispos INCOMPATIBLE :
        // 1 - les périodes incluant $from
        // 2 - les périodes incluant $to
        // 3 - les périodes comprises entre $from et $to
        $req = "SELECT DISTINCT d.nid FROM {prestataires_dispos_dispos} AS d
                LEFT JOIN {node} AS n ON n.nid=d.nid
                WHERE n.type IN (" . db_placeholders($content_listing->sirtaqui_content, 'text') . ")
                AND (
                        (
                            (d.start_date<='%s' AND d.end_date>='%s')
                            OR (d.start_date<='%s' AND d.end_date>='%s')
                            OR (d.start_date>='%s' AND d.end_date<='%s')
                        )
                        AND d.type_dispo NOT IN (" . db_placeholders($types_dispos, 'int') . "
                    )
                )";

        $args = array_merge(
            $content_listing->sirtaqui_content,
            array(
                $field['values']['from'],
                $field['values']['from'],
                $field['values']['to'],
                $field['values']['to'],
                $field['values']['from'],
                $field['values']['to'],
            ),
            $types_dispos
        );

        $result = db_query($req, $args);

        // DEBUG : pour tester la requête directement dans PHPMA
        if(variable_get('prestataires_dispos_debug_query', false)) {
            global $user;
            if($user->uid == 1){drupal_set_message("<strong>DEBUG (from _prestataires_dispos_search_sql_fragment()) - prestataires_dispos search query : </strong><br />" . preg_replace('#[{}]#', '', vsprintf($req, $args)));}
        }

        $nids = array();

        while($row = db_fetch_array($result)) {
            $nids[] = $row['nid'];
        }

        if(!empty($nids)) {
            $query['where'][] = "n.nid NOT IN (" . db_placeholders($nids, 'int') . ")";
            $query['args'] = array_merge($query['args'], $nids);
            $query['where'][] = "n.tnid NOT IN (" . db_placeholders($nids, 'int') . ")";
            $query['args'] = array_merge($query['args'], $nids);
        }

        // les prestataires qui n'ont pas du-tout rempli leurs dispos pour cette période, sont également exclus des résultats
        // (plus précisément, on ne conserve que les prestataires qui ont au moins une dispo remplie dans cette période)
        $query['join'][] = "LEFT JOIN {prestataires_dispos_dispos} AS dispos ON dispos.nid=n.tnid OR dispos.nid=n.nid";
        $query['where'][] = "(
                            ((dispos.start_date<='%s' AND dispos.end_date>='%s')
                            OR (dispos.start_date<='%s' AND dispos.end_date>='%s')
                            OR (dispos.start_date>='%s' AND dispos.end_date<='%s'))
                            AND dispos.nid IS NOT NULL)";

        $query['args'] = array_merge($query['args'],
            array(
                $field['values']['from'],
                $field['values']['from'],
                $field['values']['to'],
                $field['values']['to'],
                $field['values']['from'],
                $field['values']['to'],
            )
        );

        $query['join'][] = "LEFT JOIN {prestataires_dispos_nodes} AS dispos_nodes ON dispos_nodes.nid=n.tnid OR dispos_nodes.nid=n.nid";
        $query['order_by'][] = "dispos_nodes.last_update DESC";

    } else { // Les résultats doivent contenir au moins un jour correspondant à un des types de disponibilités sélectionnés

        // on recherche les nids des périodes correspondantes, ayant un type de dispos COMPATIBLE :
        // 1 - les périodes incluant $from
        // 2 - les périodes incluant $to
        // 3 - les périodes comprises entre $from et $to
        $req = "SELECT DISTINCT d.nid FROM {prestataires_dispos_dispos} as d
                LEFT JOIN {node} AS n ON n.nid=d.nid
                WHERE n.type IN (" . db_placeholders($content_listing->sirtaqui_content, 'text') . ")
                AND (
                        (
                            (d.start_date<='%s' AND d.end_date>='%s')
                            OR (d.start_date<='%s' AND d.end_date>='%s')
                            OR (d.start_date>='%s' AND d.end_date<='%s')
                        )
                        AND d.type_dispo IN (" . db_placeholders($types_dispos, 'int') . "
                    )
                )";

        $args = array_merge(
            $content_listing->sirtaqui_content,
            array(
                $field['values']['from'],
                $field['values']['from'],
                $field['values']['to'],
                $field['values']['to'],
                $field['values']['from'],
                $field['values']['to'],
            ),
            $types_dispos
        );

        $result = db_query($req, $args);

        // DEBUG : pour tester la requête directement dans PHPMA
        if(variable_get('prestataires_dispos_debug_query', false)) {
            global $user;
            if($user->uid == 1){drupal_set_message("<strong>DEBUG (from _prestataires_dispos_search_sql_fragment()) - prestataires_dispos search query : </strong><br />" . preg_replace('#[{}]#', '', vsprintf($req, $args)));}
        }

        $nids = array(0); // on évite le warning de db_placeholder, qui génère lui-même une erreur SQL. "0" n'a pas d'influence sur les résultats.

        while($row = db_fetch_array($result)) {
            $nids[] = $row['nid'];
        }

        // on inclut ou non les prestataires qui n'ont pas du-tout rempli leurs dispos pour cette période
        if($field['configuration']['include_unknown'] == 1) {

            $req = "SELECT dn.nid FROM {prestataires_dispos_nodes} AS dn
                    LEFT JOIN {node} AS n ON n.nid=dn.nid
                    WHERE n.type IN (" . db_placeholders($content_listing->sirtaqui_content, 'text') . ")
                    AND dn.nid NOT IN (
                        SELECT nid FROM {prestataires_dispos_dispos}
                        WHERE
                            (start_date<='%s' AND end_date>='%s')
                            OR (start_date<='%s' AND end_date>='%s')
                            OR (start_date>='%s' AND end_date<='%s')
                    )";

            $result = db_query($req,
                    array_merge(
                        $content_listing->sirtaqui_content,
                        array(
                            $field['values']['from'],
                            $field['values']['from'],
                            $field['values']['to'],
                            $field['values']['to'],
                            $field['values']['from'],
                            $field['values']['to'],
                        )
                    )
                );

            $nids_non_set = array();

            while($row = db_fetch_object($result)) {
                $nids_non_set[] = $row->nid;
            }

            if(!empty($nids_non_set)) {
                $query['where'][] = "(n.nid IN (" . db_placeholders($nids, 'int') . ") OR n.nid IN (" . db_placeholders($nids_non_set, 'int') . ")" .
                                    "OR n.tnid IN (" . db_placeholders($nids, 'int') . ") OR n.tnid IN (" . db_placeholders($nids_non_set, 'int') . "))";
                $query['args'] = array_merge($query['args'], $nids);
                $query['args'] = array_merge($query['args'], $nids_non_set);
                $query['args'] = array_merge($query['args'], $nids);
                $query['args'] = array_merge($query['args'], $nids_non_set);
            } else {
                $query['where'][] = "(n.nid IN (" . db_placeholders($nids, 'int') . ")" .
                                    "OR n.tnid IN (" . db_placeholders($nids, 'int') . "))";
                $query['args'] = array_merge($query['args'], $nids);
                $query['args'] = array_merge($query['args'], $nids);
            }

            $query['join'][] = "LEFT JOIN {prestataires_dispos_nodes} AS dispos_nodes ON dispos_nodes.nid=n.tnid OR dispos_nodes.nid=n.nid";
            array_unshift($query['order_by'], "dispos_nodes.last_update DESC");

            array_unshift($query['order_by'], "(n.nid IN (" . db_placeholders($nids, 'int') . ") OR n.tnid IN (" . db_placeholders($nids, 'int') . ")) DESC");
            $query['args'] = array_merge($query['args'], $nids);
            $query['args'] = array_merge($query['args'], $nids);

        } else {
            $query['where'][] = "(n.nid IN (" . db_placeholders($nids, 'int') . ")" .
                                "OR n.tnid IN (" . db_placeholders($nids, 'int') . "))";
            $query['args'] = array_merge($query['args'], $nids);
            $query['args'] = array_merge($query['args'], $nids);

            _prestataires_dispos_orderby_sql_fragment($query, $orderby_mode);
        }

    } // endif results_accuracy

}

/**
 * Helper : compile search fragment order by data
 */
function _prestataires_dispos_orderby_sql_fragment(&$query, $orderby_mode) {

    if($orderby_mode != 0) {
        $query['join'][] = "LEFT JOIN {prestataires_dispos_nodes} AS prestataires_dispos_nodes ON prestataires_dispos_nodes.nid=n.tnid OR prestataires_dispos_nodes.nid=n.nid";

        $order_by_clause = "prestataires_dispos_nodes.last_update DESC";

        switch($orderby_mode) {
            case 1: // prepend
                array_unshift($query['order_by'], $order_by_clause);
                break;

            case 2: // append
                array_push($query['order_by'], $order_by_clause);
                break;

            case 3: // replace
                $query['order_by'] = array($order_by_clause);
                break;
        }
    }
}

/**
 * Implementation of hook_scl_search()
 */
function prestataires_dispos_scl_search($field, &$query, &$compiler_options, $matching_modes, $content_listing) {

    $orderby_mode = variable_get('prestataires_dispos_search_orderby', 0);

    if($orderby_mode == 0) {return;}

    if(variable_get('prestataires_dispos_defer_search', 0) == 1) { // Delegate

        $compiler_options['prestataires_dispos_defer_search_field'] = $field;
        $compiler_options['prestataires_dispos_defer_search_field']['orderby_mode'] = $orderby_mode;

    } elseif($orderby_mode != 0) {

        $compiler_options['prestataires_dispos_processed'] = true; // on signale à prestataires_dispos_scl_query() qu'on a déjà une clause orderby
        _prestataires_dispos_search_sql_fragment($field, $query, $orderby_mode, $content_listing);
    }
}

/**
 * Implementation of hook_scl_query()
 */
function prestataires_dispos_scl_query(&$query, &$compiler_options, $content_listing) {

    $orderby_mode = variable_get('prestataires_dispos_query_orderby', 0);

    if(!empty($compiler_options['prestataires_dispos_defer_search_field'])) {
        _prestataires_dispos_search_sql_fragment($compiler_options['prestataires_dispos_defer_search_field'], $query, $compiler_options['prestataires_dispos_defer_search_field']['orderby_mode'], $content_listing);
    } elseif(empty($compiler_options['prestataires_dispos_processed'])) {
        _prestataires_dispos_orderby_sql_fragment($query, $orderby_mode);
    }
}


function prestataires_dispos_so_alertes() {
	$alertes['planning_vide'] = array(
			'name' => 'Planning vide',
			'description' => 'Alerte périodique qui vérifie si une journée du planning est vide.',
			'type' => 'cron',
			/* Variables et fonctions utiles pour créer le message envoyé */
			'message_vars' => array(
					'planning_id' => 'L\'id planning',
					'planning_name' => 'Le nom du planning',
					'planning_date' => 'Le jour vide pour lequel l\'alerte est déclenchée',
			),
			'alerte_callback' => 'prestataires_dispos_so_alertes_plannong_vide_test_and_get_vars', //Prend 1 argument, les données déjà récupérées, cette fonction sert à les compléter
			'default_message' => 'Bonjour %user%, le %planning_date%, vous n\'avez aucune réservation enregistrée sur votre planning "%planning_name%".<br/><br/>Mail automatique de l\'alerte "%alerte%" du module "%module%". Le %date% (planning id : %planning_id%, mail : %mail%)',
			/* Utilitaires pour construire le formulaire de configuration de l'alerte */
			/* Utilise toutes ou une partie des clés des message_vars */
			'form_callback' => 'prestataires_dispos_so_alertes_planning_vide_form',
			//Obligatoire
			'callback_file' => 'prestataires_dispos.module',
	);

	$alertes['journee_complete'] = array(
			/* Infos sur l'alerte */
			'name' => 'Journée complète',
			'description' => 'Alerte périodique qui vérifie si une journée du planning est complète.',
			'type' => 'cron',
			/* Variables et fonctions utiles pour créer le message envoyé */
			'message_vars' => array(
					'planning_id' => 'L\'id planning complet',
					'planning_name' => 'Le nom du planning complet',
					'planning_date' => 'Le jour complet pour lequel l\'alerte est déclenchée',
			),
			'alerte_callback' => 'prestataires_dispos_so_alertes_plannong_vide_test_and_get_vars', //Prend 1 argument, les données déjà récupérées, cette fonction sert à les compléter
			'default_message' => 'Bonjour %user%, votre journée du %planning_date% est complète sur votre planning "%planning_name%".<br/><br/>Mail automatique de l\'alerte "%alerte%" du module "%module%". Le %date% (planning id : %planning_id%, mail : %mail%)',
			/* Utilitaires pour construire le formulaire de configuration de l'alerte */
			/* Utilise toutes ou une partie des clés des message_vars */
			'form_callback' => 'prestataires_dispos_so_alertes_planning_vide_form',
			//Obligatoire
			'callback_file' => 'prestataires_dispos.module',
	);

	return $alertes;
}

//Prend 1 argument, les données déjà récupérées, cette fonction sert à les compléter
function prestataires_dispos_so_alertes_plannong_vide_test_and_get_vars($data) {

	//planning_id a été choisi lorsque l'user a créé l'alerte, donc il fait déjà partie de $data
	$planning_id = $data['planning_id'];

	/* Partie propre à chaque module, chaque alerte */
	if (check_planning($planning_id)) {
		$vars = array();

		//SELECT * FROM planning WHERE id = planning id

		/* On complète les variables qui sont encore vide pour le message */
		$vars['planning_name'] = "Mon planning " . $planning_id;
		$vars['planning_date'] = "lundi 20 mai";
		return $vars;
	} else {
		return false;
	}
}

function prestataires_dispos_so_alertes_planning_vide_form() {

	$form = array();

	// 'planning_id' est une des message_vars de l'alerte
	$form['planning_id'] = array(
			'#type' => 'select',
			'#options' => array(1 => "Réservations camping", 2 => "Réservations hôtel"),
			'#title' => "Choix du planning à vérifier",
	);

	return $form;
}

function check_planning($planning_id) {
	return true;
}

// 19/05/2015
function prestataires_dispos_page_dispos() {

    $dispos = cache_get('prestataires_dispos_page_dispos', 'cache');

    if(!empty($dispos) && (time() - $dispos->created < 3600)) {
        return $dispos->data;
    }

    $from = DateTime::createFromFormat('U', time());
    $from->setTimezone(new DateTimeZone("Europe/Paris"));

    $to = clone $from;
    $to->modify('+2 days');

    $dispos = prestataires_dispos_page_dispos_infos(
        'sirtaqui_hebergement_locatif',
        "Chambres d'hôtes",
        $from->format('Y-m-d') . ' 00:00:00',
        $to->format('Y-m-d') . ' 00:00:00'
    );

    $dispos .= prestataires_dispos_page_dispos_infos(
        'sirtaqui_hotellerie',
        "Hôtels",
        $from->format('Y-m-d') . ' 00:00:00',
        $to->format('Y-m-d') . ' 00:00:00'
    );

    cache_set('prestataires_dispos_page_dispos', $dispos, 'cache');
    watchdog('Prestataire Dispo', t("Dispos page cache has been regenerated."));

    return $dispos;
}

// 19/05/2015
function prestataires_dispos_page_dispos_infos($content_type, $content_label, $date_from, $date_to) {

    $dispos_types = array(
        2 => "C", // full
        3 => "P", // limited,
        4 => "D", // available
    );

    $dispos_fields_tmp = array(
        "field_dispos_brochure_num|N° brochure",
        "title|Nom de l'hébergement",
        "field_commune|Commune",
        "field_telephone|Téléphone",
    );

    $dispos_fields = array();

    foreach($dispos_fields_tmp as $field) {
        $field = explode('|', $field);
        $dispos_fields[$field[0]] = $field[1];
    }

    $from = DateTime::createFromFormat('Y-m-d H:i:s', $date_from);
    $to = DateTime::createFromFormat('Y-m-d H:i:s', $date_to);
    $interval = new DateInterval('P1D');

    $to->add($interval); // DatePeriod exclut la date de fin

    $period = new DatePeriod($from, $interval, $to);

    $dispos_default = array();

    // on génère un array "modèle", indexé par chaque date de la période
    foreach($period as $date) {
        $dispos_default[$date->format('d/m/Y')] = '-';
    }

    $req = "SELECT DISTINCT dn.nid, n.title, dn.last_update FROM {prestataires_dispos_nodes} AS dn
            LEFT JOIN {node} AS n ON n.nid=dn.nid
            LEFT JOIN {prestataires_dispos_dispos} AS dd ON dd.nid=dn.nid";

    if($content_type == 'sirtaqui_hebergement_locatif') {
        $req .= " LEFT JOIN {content_field_f_type} AS t ON t.nid=dn.nid";
    }

    $joins = variable_get('prestataires_dispos_export_joins', '');

    if($joins != '') {
        $req .= " " . $joins;
    }

    $req .= " WHERE n.type='%s'";

    $req .= " AND n.status=1";

    $req .= " AND (
            (dd.start_date>='%s' AND dd.start_date<='%s')
            OR (dd.end_date>='%s' AND dd.end_date<='%s')
            OR (dd.start_date<='%s' AND dd.end_date>='%s')
            )";

    $req .= " AND dd.type_dispo > 1";

    if($content_type == 'sirtaqui_hebergement_locatif') {
        $req .= " AND t.field_f_type_value=181"; // 181 = "Chambres d'hôtes"
    }

    $req .= " ORDER BY " . variable_get('prestataires_dispos_export_orderby', 'n.title ASC');

    $result = db_query($req,
        $content_type,
        $date_from,
        $date_to,
        $date_from,
        $date_to,
        $date_from,
        $date_to
    );

    $nodes = array();

    while($row = db_fetch_object($result)) {
        $nodes[$row->nid] = array();

        $node = node_load($row->nid);

        if(module_exists('sirtaqui_content_listing')) {

            foreach($dispos_fields as $field_name => $label) {

                if(!isset($node->{$field_name})) { // ce champ n'appartient pas à ce type de contenu
                    unset($dispos_fields[$field_name]);
                    continue;
                }

                $values = array();

                foreach((array)$node->{$field_name} as $node_field) {

                    if($field_name == 'title') {
                        $values[] = l($node_field, drupal_get_path_alias('node/' . $node->nid), array('attributes' => array('target' => '_blank')));
                    } else {
                        $values[] = is_array($node_field) ? $node_field['value'] : $node_field;
                    }
                }

                $values = array_filter($values);

                if(empty($values)) {
                    foreach((array)$node->{normalize_field_name('field_f_' . str_replace('field_', '', $field_name))} as $node_field) {
                        $values[] = is_array($node_field) ? $node_field['value'] : $node_field;
                    }
                }

                $values = implode(' - ', $values);

                $nodes[$row->nid][$field_name] = $values;
            }
        }

        $sub_req = "SELECT start_date, end_date, type_dispo FROM {prestataires_dispos_dispos} WHERE nid=%d";
        $sub_result = db_query($sub_req, $row->nid);

        $dispos = $dispos_default;

        while($sub_row = db_fetch_object($sub_result)) {

            if($sub_row->type_dispo == 1) {continue;}

            $period_from = DateTime::createFromFormat('Y-m-d', $sub_row->start_date);
            $period_to = DateTime::createFromFormat('Y-m-d', $sub_row->end_date);

            $period_to->add($interval); // DatePeriod exclut la date de fin

            $period = new DatePeriod($period_from, $interval, $period_to);

            foreach($period as $date) {
                $dispos[$date->format('d/m/Y')] = $dispos_types[$sub_row->type_dispo];
            }
        }

        $dispos = array_intersect_key($dispos, $dispos_default);

        $nodes[$row->nid] += $dispos;
    }

    $cols_header = array_merge(array_values($dispos_fields), array_keys($dispos_default));

    return theme('prestataires_dispos_page_table', $nodes, $cols_header, $content_label);
}