<?php

/**
 * Implementation of hook_menu().
 */
function prestataires_menu() {
    $items = array();

    $items['admin/settings/prestataires'] = array(
        'title' => 'Module Prestataires',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('prestataires_settings_form'),
        'access arguments' => array('administer prestataires'),
    );

    return $items;
}

/**
 * Implementation of hook_user().
 *
 * @param $op What kind of actions is being performed. Possible values: after_update, categories, delete, form, insert, load, login, logout, register, submit, update, validate, view
 * @param &$edit The array of form values submitted by the user.
 * @param &$account The user object on which the operation is being performed.
 * @param $category The active category of user information being edited.
 */
function prestataires_user($op, &$edit, &$account, $category = NULL) {
    if($op != 'view') {return;}

    $infos = module_invoke_all('prestataires', 'user_profil', $account);

    if($infos == null) {return;}

    $account->content['prestataires_user_profile_infos'] = array(
        '#type' => 'user_profile_category',
        '#title' => t("Prestataires user profile infos"),
        '#weight' => 10,
        'infos' => $infos,
    );
}

/**
 * Provide matching RID *
 * @return int The RID
 */
function prestataires_get_rid($role) {
    $roles = user_roles();
    return array_search($role, $roles);
}

/**
 * Call all prestataires modules and return their roles
 *
 * @return array
 */
function prestataires_get_roles() {
    return module_invoke_all('prestataires', 'roles');
}

/**
 * Implementation of hook_perm().
 */
function prestataires_perm() {
    return array('administer prestataires');
}

/**
 * Call all prestataires modules and return their settings form
 */
function prestataires_settings_form() {
    
    $form = array();
    
    $form = module_invoke_all('prestataires', 'settings');
    
    return system_settings_form($form);
}

/**
 * Call all prestataires modules and return their user edit form
 */
function prestataires_form_user_profile_form_alter(&$form, &$form_state) {
    
    // Pour supprimer l'auto-population du premier champs password sous Firefox (obligÃ© d'appliquer Ã  tout le formulaire)
    $form['#attributes']['autocomplete'] = 'off';
    
    $form = array_merge_recursive($form, module_invoke_all('prestataires', 'user_edit_form', $form));
}

/**
 * Implementation of hook_block().
 *
 * @param $op What kind of information to retrieve about the block. Possible values: list, configure, save, view.
 * @param $delta Which block to return.
 * @param $edit Data from a configuration form, if submitted.
 */
function prestataires_block($op = 'list', $delta = 0, $edit = array()) {
    switch ($op) {
        case 'list':
            $blocks = array();

            $blocks['user'] = array(
                'info' => t('Prestataires box'),
                'cache' => BLOCK_CACHE_PER_USER,
            );

            return $blocks;
            break;

        case 'view':
            $block = array();

            switch ($delta) {
                case 'user':
                    global $user;

                    $prestataire_roles = prestataires_get_roles();
                    $user_roles = $user->roles;
                    $is_prestataire = false;
                    
                    foreach($user_roles as $user_role) {
                        if(in_array($user_role, $prestataire_roles) == true) {
                            $is_prestataire = true;
                            break;
                        }
                    }
                    
                    if($is_prestataire == false) {return;}

                    $block['subject'] = t('Welcome %name', array('%name' => ucfirst($user->name)));
                    $block['content'] = prestataires_block_content($delta);

                    break;
            }

            return $block;
            break;
    }
}

/**
 * Generate block contents.
 *
 * @param $delta The block id.
 * @return The generated block content.
 */
function prestataires_block_content($delta) {

    switch ($delta) {

        case 'user':

            $output = "";

            $output .= l(t("Your account"), 'user');
            $output .= l(t("Log out"), 'logout');

            return $output;
            break;
    }
}

